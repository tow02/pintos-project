			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Paween Theanvanichpant <paween.the@gmail.com>
Torpong Juntree <torpong.boss@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
	In timer.c, added global variable:
	static struct list sleep_list;

	List that keeps track of sleeping threads.
	In thread.h, added variable to thread struct:

	int64_t ticks;

	When thread is done sleeping, thread will ready to be unblocked,
	which is indicated by variable tick value in thread.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
	timer_sleep() will put the current thread into the ready queue then block the thread.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
	There is a list that keep track of sleep, so the timer interrupt handler
	don't need to check through every threads.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
	Current thread should be blocked so that other thread can not call
	timer_sleep(). Once the current thread is added into the waiting queue,
	the current thread will be unblock so that other thread can call timer_sleep().

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
	The timer interrupt need to check some variable before doing the real
	interrupt and while checking it have to disable the interrupt. Therefore,
	it should not possible to have the race condition occur.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
	By keeping in the list, it would spend less time when there
	are more thread to go through, and easy to access and know
	that which one need to be interrupted.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
	// added to thread struct
	int base_priority;
	base_priority is to keep the the value of the priority before it donates
	to other thread.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)
	We will have the waiting-list of thread that sorted by its priority.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
	In semaphore, the higher priority thread will be inserted
	in front of the list for doing lock. Therefore, the list will
	be sorted after the semaphore is released.


>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
	Example: (T_63 waits for T_10 and T_10 waits T_100)
	T_63 ->
					T_10 ->
									T_100
	If T_63 needs to acquire the lock and T_10 and T_100 have lower priority.
	T_63 needs to donates the priority to both T_10 and T_100 so that it can
	acquire the lock later. Otherwise, it needs to wait for T_10 and T_100
	for long time.


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
	 The highest priority thread waiting for that lock should be unblocked and put on the list of ready threads.
	 The scheduler should then run the highest priority thread on the ready list

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
	During the thread priority update, the interrupt handler
	is writing the priority variable. Thus, these would cause
	a conflicting writes that lead to the race condition.


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
	I want to minimize the variables as much as possible, and
	it is easy to find the next highest priority of thread.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
	int nice;
	- Nice value of current thread

	int recent_cpu;
	- the value of recently calculated thread

	Add one more global variable in thread.c

	int load_avg;
	- recently calculated load average value of the system

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0			0		0		0		63	61	59		A
 4			4		0		0		62	61	59		A
 8			8		0		0		61	61	59		A
12			12	0		0		60	61	59		B
16			12	4		0		60	60	59		A
20			16	4		0		59	60	59		B
24			16	8		0		59	59	59		A
28			20	8		0		58	59	59		B
32			20	12	0		58	58	59		C
36			20	12	4		58	58	58		A

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?
	There is a case when every thread has the same priority. In this case,
	we look at the nice value of the thread. If the thread has more nice
	value, it means that it will donate the priority to other thread. Hence,
	it will let the other thread that has less of nice value to run first.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?
	Since scheduler variable need to keep updating, computation
	parts are mostly done in the inside by the interrupt handler.
	However, some variables need to be recalculated such as
	the load average, recent_cpu and priority. Thus, it would
	affect performance, when it has to deal with a lot of thread.
	On the outside, it only calculate the nice value, which affect
	priority.


---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
	Advantages: easy to implement because we can look at the nice value of each thread
	if all the threads has the same priority.

	Disadvantages: There suppose to be more than one but we can't find it yet.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
